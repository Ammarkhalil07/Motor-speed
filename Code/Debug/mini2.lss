
mini2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000018ce  00001962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007e  0080007e  00001980  2**0
                  ALLOC
  3 .stab         00001590  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000af9  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00003cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005902  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000067ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000759c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007989  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008157  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 0b 	call	0x167c	; 0x167c <main>
      8a:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0;
     b4e:	e7 e2       	ldi	r30, 0x27	; 39
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     b54:	e6 e2       	ldi	r30, 0x26	; 38
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	83 e8       	ldi	r24, 0x83	; 131
     b5a:	80 83       	st	Z, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 ch_num)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = (ADMUX & 0xE0) | (ch_num & 0x07);
     b6e:	a7 e2       	ldi	r26, 0x27	; 39
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e7 e2       	ldi	r30, 0x27	; 39
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	98 2f       	mov	r25, r24
     b7a:	90 7e       	andi	r25, 0xE0	; 224
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	87 70       	andi	r24, 0x07	; 7
     b80:	89 2b       	or	r24, r25
     b82:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     b84:	a6 e2       	ldi	r26, 0x26	; 38
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e6 e2       	ldi	r30, 0x26	; 38
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 64       	ori	r24, 0x40	; 64
     b90:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
     b92:	e6 e2       	ldi	r30, 0x26	; 38
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	80 71       	andi	r24, 0x10	; 16
     b9e:	90 70       	andi	r25, 0x00	; 0
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	b9 f3       	breq	.-18     	; 0xb92 <ADC_readChannel+0x30>
	SET_BIT(ADCSRA,ADIF);
     ba4:	a6 e2       	ldi	r26, 0x26	; 38
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e6 e2       	ldi	r30, 0x26	; 38
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 61       	ori	r24, 0x10	; 16
     bb0:	8c 93       	st	X, r24
	return ADC;
     bb2:	e4 e2       	ldi	r30, 0x24	; 36
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	91 81       	ldd	r25, Z+1	; 0x01
}
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <__vector_2>:
#include "interrupt.h"

static volatile void (*g_callBackPtr1)(void) = NULL_PTR;

ISR(INT1_vect)
{
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	11 24       	eor	r1, r1
     bcc:	2f 93       	push	r18
     bce:	3f 93       	push	r19
     bd0:	4f 93       	push	r20
     bd2:	5f 93       	push	r21
     bd4:	6f 93       	push	r22
     bd6:	7f 93       	push	r23
     bd8:	8f 93       	push	r24
     bda:	9f 93       	push	r25
     bdc:	af 93       	push	r26
     bde:	bf 93       	push	r27
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
     bec:	80 91 7e 00 	lds	r24, 0x007E
     bf0:	90 91 7f 00 	lds	r25, 0x007F
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	29 f0       	breq	.+10     	; 0xc02 <__vector_2+0x40>
	{
		(*g_callBackPtr1)();
     bf8:	e0 91 7e 00 	lds	r30, 0x007E
     bfc:	f0 91 7f 00 	lds	r31, 0x007F
     c00:	09 95       	icall
	}
}
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	0f 90       	pop	r0
     c24:	1f 90       	pop	r1
     c26:	18 95       	reti

00000c28 <INTERRUPT_init>:
 * interrupt
 * Using interrupt 1
 * Rising Edge
 */
void INTERRUPT_init(void)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
		CLEAR_BIT(DDRD,PD3);
     c30:	a1 e3       	ldi	r26, 0x31	; 49
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	8c 93       	st	X, r24
		SET_BIT(GICR,INT1);
     c3e:	ab e5       	ldi	r26, 0x5B	; 91
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	eb e5       	ldi	r30, 0x5B	; 91
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	80 68       	ori	r24, 0x80	; 128
     c4a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC10);
     c4c:	a5 e5       	ldi	r26, 0x55	; 85
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e5       	ldi	r30, 0x55	; 85
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	88 60       	ori	r24, 0x08	; 8
     c66:	8c 93       	st	X, r24
}
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <INTERRUPT_1_callBack>:
void INTERRUPT_1_callBack(void (*a_ptr)(void))
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <INTERRUPT_1_callBack+0x6>
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr1 = a_ptr;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	90 93 7f 00 	sts	0x007F, r25
     c84:	80 93 7e 00 	sts	0x007E, r24
}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     c9a:	e4 e3       	ldi	r30, 0x34	; 52
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     ca2:	a1 e3       	ldi	r26, 0x31	; 49
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e1 e3       	ldi	r30, 0x31	; 49
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	80 67       	ori	r24, 0x70	; 112
     cae:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     cb0:	88 e3       	ldi	r24, 0x38	; 56
     cb2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     cb6:	8c e0       	ldi	r24, 0x0C	; 12
     cb8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LCD_sendCommand>
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	e9 97       	sbiw	r28, 0x39	; 57
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     cde:	a2 e3       	ldi	r26, 0x32	; 50
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e2 e3       	ldi	r30, 0x32	; 50
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 7e       	andi	r24, 0xEF	; 239
     cea:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     cec:	a2 e3       	ldi	r26, 0x32	; 50
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e2 e3       	ldi	r30, 0x32	; 50
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 7d       	andi	r24, 0xDF	; 223
     cf8:	8c 93       	st	X, r24
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 e8       	ldi	r26, 0x80	; 128
     d00:	bf e3       	ldi	r27, 0x3F	; 63
     d02:	8d ab       	std	Y+53, r24	; 0x35
     d04:	9e ab       	std	Y+54, r25	; 0x36
     d06:	af ab       	std	Y+55, r26	; 0x37
     d08:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0a:	6d a9       	ldd	r22, Y+53	; 0x35
     d0c:	7e a9       	ldd	r23, Y+54	; 0x36
     d0e:	8f a9       	ldd	r24, Y+55	; 0x37
     d10:	98 ad       	ldd	r25, Y+56	; 0x38
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	4a e7       	ldi	r20, 0x7A	; 122
     d18:	53 e4       	ldi	r21, 0x43	; 67
     d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	89 ab       	std	Y+49, r24	; 0x31
     d24:	9a ab       	std	Y+50, r25	; 0x32
     d26:	ab ab       	std	Y+51, r26	; 0x33
     d28:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d2a:	69 a9       	ldd	r22, Y+49	; 0x31
     d2c:	7a a9       	ldd	r23, Y+50	; 0x32
     d2e:	8b a9       	ldd	r24, Y+51	; 0x33
     d30:	9c a9       	ldd	r25, Y+52	; 0x34
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e8       	ldi	r20, 0x80	; 128
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3e:	88 23       	and	r24, r24
     d40:	2c f4       	brge	.+10     	; 0xd4c <LCD_sendCommand+0x84>
		__ticks = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	98 ab       	std	Y+48, r25	; 0x30
     d48:	8f a7       	std	Y+47, r24	; 0x2f
     d4a:	3f c0       	rjmp	.+126    	; 0xdca <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     d4c:	69 a9       	ldd	r22, Y+49	; 0x31
     d4e:	7a a9       	ldd	r23, Y+50	; 0x32
     d50:	8b a9       	ldd	r24, Y+51	; 0x33
     d52:	9c a9       	ldd	r25, Y+52	; 0x34
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	3f ef       	ldi	r19, 0xFF	; 255
     d58:	4f e7       	ldi	r20, 0x7F	; 127
     d5a:	57 e4       	ldi	r21, 0x47	; 71
     d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d60:	18 16       	cp	r1, r24
     d62:	4c f5       	brge	.+82     	; 0xdb6 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d64:	6d a9       	ldd	r22, Y+53	; 0x35
     d66:	7e a9       	ldd	r23, Y+54	; 0x36
     d68:	8f a9       	ldd	r24, Y+55	; 0x37
     d6a:	98 ad       	ldd	r25, Y+56	; 0x38
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e2       	ldi	r20, 0x20	; 32
     d72:	51 e4       	ldi	r21, 0x41	; 65
     d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	98 ab       	std	Y+48, r25	; 0x30
     d8a:	8f a7       	std	Y+47, r24	; 0x2f
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <LCD_sendCommand+0xe4>
     d8e:	89 e1       	ldi	r24, 0x19	; 25
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	9e a7       	std	Y+46, r25	; 0x2e
     d94:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d96:	8d a5       	ldd	r24, Y+45	; 0x2d
     d98:	9e a5       	ldd	r25, Y+46	; 0x2e
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <LCD_sendCommand+0xd2>
     d9e:	9e a7       	std	Y+46, r25	; 0x2e
     da0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da2:	8f a5       	ldd	r24, Y+47	; 0x2f
     da4:	98 a9       	ldd	r25, Y+48	; 0x30
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	98 ab       	std	Y+48, r25	; 0x30
     daa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dac:	8f a5       	ldd	r24, Y+47	; 0x2f
     dae:	98 a9       	ldd	r25, Y+48	; 0x30
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	69 f7       	brne	.-38     	; 0xd8e <LCD_sendCommand+0xc6>
     db4:	14 c0       	rjmp	.+40     	; 0xdde <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db6:	69 a9       	ldd	r22, Y+49	; 0x31
     db8:	7a a9       	ldd	r23, Y+50	; 0x32
     dba:	8b a9       	ldd	r24, Y+51	; 0x33
     dbc:	9c a9       	ldd	r25, Y+52	; 0x34
     dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	98 ab       	std	Y+48, r25	; 0x30
     dc8:	8f a7       	std	Y+47, r24	; 0x2f
     dca:	8f a5       	ldd	r24, Y+47	; 0x2f
     dcc:	98 a9       	ldd	r25, Y+48	; 0x30
     dce:	9c a7       	std	Y+44, r25	; 0x2c
     dd0:	8b a7       	std	Y+43, r24	; 0x2b
     dd2:	8b a5       	ldd	r24, Y+43	; 0x2b
     dd4:	9c a5       	ldd	r25, Y+44	; 0x2c
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	f1 f7       	brne	.-4      	; 0xdd6 <LCD_sendCommand+0x10e>
     dda:	9c a7       	std	Y+44, r25	; 0x2c
     ddc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     dde:	a2 e3       	ldi	r26, 0x32	; 50
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e2 e3       	ldi	r30, 0x32	; 50
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 64       	ori	r24, 0x40	; 64
     dea:	8c 93       	st	X, r24
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e8       	ldi	r26, 0x80	; 128
     df2:	bf e3       	ldi	r27, 0x3F	; 63
     df4:	8f a3       	std	Y+39, r24	; 0x27
     df6:	98 a7       	std	Y+40, r25	; 0x28
     df8:	a9 a7       	std	Y+41, r26	; 0x29
     dfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6f a1       	ldd	r22, Y+39	; 0x27
     dfe:	78 a5       	ldd	r23, Y+40	; 0x28
     e00:	89 a5       	ldd	r24, Y+41	; 0x29
     e02:	9a a5       	ldd	r25, Y+42	; 0x2a
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a e7       	ldi	r20, 0x7A	; 122
     e0a:	53 e4       	ldi	r21, 0x43	; 67
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	8b a3       	std	Y+35, r24	; 0x23
     e16:	9c a3       	std	Y+36, r25	; 0x24
     e18:	ad a3       	std	Y+37, r26	; 0x25
     e1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e1c:	6b a1       	ldd	r22, Y+35	; 0x23
     e1e:	7c a1       	ldd	r23, Y+36	; 0x24
     e20:	8d a1       	ldd	r24, Y+37	; 0x25
     e22:	9e a1       	ldd	r25, Y+38	; 0x26
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <LCD_sendCommand+0x176>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	9a a3       	std	Y+34, r25	; 0x22
     e3a:	89 a3       	std	Y+33, r24	; 0x21
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     e3e:	6b a1       	ldd	r22, Y+35	; 0x23
     e40:	7c a1       	ldd	r23, Y+36	; 0x24
     e42:	8d a1       	ldd	r24, Y+37	; 0x25
     e44:	9e a1       	ldd	r25, Y+38	; 0x26
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6f a1       	ldd	r22, Y+39	; 0x27
     e58:	78 a5       	ldd	r23, Y+40	; 0x28
     e5a:	89 a5       	ldd	r24, Y+41	; 0x29
     e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	9a a3       	std	Y+34, r25	; 0x22
     e7c:	89 a3       	std	Y+33, r24	; 0x21
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <LCD_sendCommand+0x1d6>
     e80:	89 e1       	ldi	r24, 0x19	; 25
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	98 a3       	std	Y+32, r25	; 0x20
     e86:	8f 8f       	std	Y+31, r24	; 0x1f
     e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e8a:	98 a1       	ldd	r25, Y+32	; 0x20
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <LCD_sendCommand+0x1c4>
     e90:	98 a3       	std	Y+32, r25	; 0x20
     e92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	89 a1       	ldd	r24, Y+33	; 0x21
     e96:	9a a1       	ldd	r25, Y+34	; 0x22
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9a a3       	std	Y+34, r25	; 0x22
     e9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	89 a1       	ldd	r24, Y+33	; 0x21
     ea0:	9a a1       	ldd	r25, Y+34	; 0x22
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <LCD_sendCommand+0x1b8>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	6b a1       	ldd	r22, Y+35	; 0x23
     eaa:	7c a1       	ldd	r23, Y+36	; 0x24
     eac:	8d a1       	ldd	r24, Y+37	; 0x25
     eae:	9e a1       	ldd	r25, Y+38	; 0x26
     eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	9a a3       	std	Y+34, r25	; 0x22
     eba:	89 a3       	std	Y+33, r24	; 0x21
     ebc:	89 a1       	ldd	r24, Y+33	; 0x21
     ebe:	9a a1       	ldd	r25, Y+34	; 0x22
     ec0:	9e 8f       	std	Y+30, r25	; 0x1e
     ec2:	8d 8f       	std	Y+29, r24	; 0x1d
     ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ec6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <LCD_sendCommand+0x200>
     ecc:	9e 8f       	std	Y+30, r25	; 0x1e
     ece:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     ed0:	e5 e3       	ldi	r30, 0x35	; 53
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	89 ad       	ldd	r24, Y+57	; 0x39
     ed6:	80 83       	st	Z, r24
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a0 e8       	ldi	r26, 0x80	; 128
     ede:	bf e3       	ldi	r27, 0x3F	; 63
     ee0:	89 8f       	std	Y+25, r24	; 0x19
     ee2:	9a 8f       	std	Y+26, r25	; 0x1a
     ee4:	ab 8f       	std	Y+27, r26	; 0x1b
     ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee8:	69 8d       	ldd	r22, Y+25	; 0x19
     eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	4a e7       	ldi	r20, 0x7A	; 122
     ef6:	53 e4       	ldi	r21, 0x43	; 67
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	8d 8b       	std	Y+21, r24	; 0x15
     f02:	9e 8b       	std	Y+22, r25	; 0x16
     f04:	af 8b       	std	Y+23, r26	; 0x17
     f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f08:	6d 89       	ldd	r22, Y+21	; 0x15
     f0a:	7e 89       	ldd	r23, Y+22	; 0x16
     f0c:	8f 89       	ldd	r24, Y+23	; 0x17
     f0e:	98 8d       	ldd	r25, Y+24	; 0x18
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	5f e3       	ldi	r21, 0x3F	; 63
     f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1c:	88 23       	and	r24, r24
     f1e:	2c f4       	brge	.+10     	; 0xf2a <LCD_sendCommand+0x262>
		__ticks = 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9c 8b       	std	Y+20, r25	; 0x14
     f26:	8b 8b       	std	Y+19, r24	; 0x13
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     f2a:	6d 89       	ldd	r22, Y+21	; 0x15
     f2c:	7e 89       	ldd	r23, Y+22	; 0x16
     f2e:	8f 89       	ldd	r24, Y+23	; 0x17
     f30:	98 8d       	ldd	r25, Y+24	; 0x18
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	4c f5       	brge	.+82     	; 0xf94 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	69 8d       	ldd	r22, Y+25	; 0x19
     f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e2       	ldi	r20, 0x20	; 32
     f50:	51 e4       	ldi	r21, 0x41	; 65
     f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	bc 01       	movw	r22, r24
     f5c:	cd 01       	movw	r24, r26
     f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	9c 8b       	std	Y+20, r25	; 0x14
     f68:	8b 8b       	std	Y+19, r24	; 0x13
     f6a:	0f c0       	rjmp	.+30     	; 0xf8a <LCD_sendCommand+0x2c2>
     f6c:	89 e1       	ldi	r24, 0x19	; 25
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9a 8b       	std	Y+18, r25	; 0x12
     f72:	89 8b       	std	Y+17, r24	; 0x11
     f74:	89 89       	ldd	r24, Y+17	; 0x11
     f76:	9a 89       	ldd	r25, Y+18	; 0x12
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x2b0>
     f7c:	9a 8b       	std	Y+18, r25	; 0x12
     f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f80:	8b 89       	ldd	r24, Y+19	; 0x13
     f82:	9c 89       	ldd	r25, Y+20	; 0x14
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	9c 8b       	std	Y+20, r25	; 0x14
     f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	8b 89       	ldd	r24, Y+19	; 0x13
     f8c:	9c 89       	ldd	r25, Y+20	; 0x14
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	69 f7       	brne	.-38     	; 0xf6c <LCD_sendCommand+0x2a4>
     f92:	14 c0       	rjmp	.+40     	; 0xfbc <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f94:	6d 89       	ldd	r22, Y+21	; 0x15
     f96:	7e 89       	ldd	r23, Y+22	; 0x16
     f98:	8f 89       	ldd	r24, Y+23	; 0x17
     f9a:	98 8d       	ldd	r25, Y+24	; 0x18
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9c 8b       	std	Y+20, r25	; 0x14
     fa6:	8b 8b       	std	Y+19, r24	; 0x13
     fa8:	8b 89       	ldd	r24, Y+19	; 0x13
     faa:	9c 89       	ldd	r25, Y+20	; 0x14
     fac:	98 8b       	std	Y+16, r25	; 0x10
     fae:	8f 87       	std	Y+15, r24	; 0x0f
     fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb2:	98 89       	ldd	r25, Y+16	; 0x10
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <LCD_sendCommand+0x2ec>
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
     fbc:	a2 e3       	ldi	r26, 0x32	; 50
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8f 7b       	andi	r24, 0xBF	; 191
     fc8:	8c 93       	st	X, r24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a0 e8       	ldi	r26, 0x80	; 128
     fd0:	bf e3       	ldi	r27, 0x3F	; 63
     fd2:	8b 87       	std	Y+11, r24	; 0x0b
     fd4:	9c 87       	std	Y+12, r25	; 0x0c
     fd6:	ad 87       	std	Y+13, r26	; 0x0d
     fd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fda:	6b 85       	ldd	r22, Y+11	; 0x0b
     fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
     fde:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	53 e4       	ldi	r21, 0x43	; 67
     fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	8f 83       	std	Y+7, r24	; 0x07
     ff4:	98 87       	std	Y+8, r25	; 0x08
     ff6:	a9 87       	std	Y+9, r26	; 0x09
     ff8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ffa:	6f 81       	ldd	r22, Y+7	; 0x07
     ffc:	78 85       	ldd	r23, Y+8	; 0x08
     ffe:	89 85       	ldd	r24, Y+9	; 0x09
    1000:	9a 85       	ldd	r25, Y+10	; 0x0a
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	5f e3       	ldi	r21, 0x3F	; 63
    100a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100e:	88 23       	and	r24, r24
    1010:	2c f4       	brge	.+10     	; 0x101c <LCD_sendCommand+0x354>
		__ticks = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9e 83       	std	Y+6, r25	; 0x06
    1018:	8d 83       	std	Y+5, r24	; 0x05
    101a:	3f c0       	rjmp	.+126    	; 0x109a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    101c:	6f 81       	ldd	r22, Y+7	; 0x07
    101e:	78 85       	ldd	r23, Y+8	; 0x08
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	3f ef       	ldi	r19, 0xFF	; 255
    1028:	4f e7       	ldi	r20, 0x7F	; 127
    102a:	57 e4       	ldi	r21, 0x47	; 71
    102c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1030:	18 16       	cp	r1, r24
    1032:	4c f5       	brge	.+82     	; 0x1086 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1034:	6b 85       	ldd	r22, Y+11	; 0x0b
    1036:	7c 85       	ldd	r23, Y+12	; 0x0c
    1038:	8d 85       	ldd	r24, Y+13	; 0x0d
    103a:	9e 85       	ldd	r25, Y+14	; 0x0e
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	51 e4       	ldi	r21, 0x41	; 65
    1044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	0f c0       	rjmp	.+30     	; 0x107c <LCD_sendCommand+0x3b4>
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_sendCommand+0x3a2>
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1072:	8d 81       	ldd	r24, Y+5	; 0x05
    1074:	9e 81       	ldd	r25, Y+6	; 0x06
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107c:	8d 81       	ldd	r24, Y+5	; 0x05
    107e:	9e 81       	ldd	r25, Y+6	; 0x06
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	69 f7       	brne	.-38     	; 0x105e <LCD_sendCommand+0x396>
    1084:	14 c0       	rjmp	.+40     	; 0x10ae <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1086:	6f 81       	ldd	r22, Y+7	; 0x07
    1088:	78 85       	ldd	r23, Y+8	; 0x08
    108a:	89 85       	ldd	r24, Y+9	; 0x09
    108c:	9a 85       	ldd	r25, Y+10	; 0x0a
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	f1 f7       	brne	.-4      	; 0x10a6 <LCD_sendCommand+0x3de>
    10aa:	9a 83       	std	Y+2, r25	; 0x02
    10ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    10ae:	e9 96       	adiw	r28, 0x39	; 57
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	e9 97       	sbiw	r28, 0x39	; 57
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    10d6:	a2 e3       	ldi	r26, 0x32	; 50
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e2 e3       	ldi	r30, 0x32	; 50
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 61       	ori	r24, 0x10	; 16
    10e2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8f 7d       	andi	r24, 0xDF	; 223
    10f0:	8c 93       	st	X, r24
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	a0 e8       	ldi	r26, 0x80	; 128
    10f8:	bf e3       	ldi	r27, 0x3F	; 63
    10fa:	8d ab       	std	Y+53, r24	; 0x35
    10fc:	9e ab       	std	Y+54, r25	; 0x36
    10fe:	af ab       	std	Y+55, r26	; 0x37
    1100:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1102:	6d a9       	ldd	r22, Y+53	; 0x35
    1104:	7e a9       	ldd	r23, Y+54	; 0x36
    1106:	8f a9       	ldd	r24, Y+55	; 0x37
    1108:	98 ad       	ldd	r25, Y+56	; 0x38
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	4a e7       	ldi	r20, 0x7A	; 122
    1110:	53 e4       	ldi	r21, 0x43	; 67
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	89 ab       	std	Y+49, r24	; 0x31
    111c:	9a ab       	std	Y+50, r25	; 0x32
    111e:	ab ab       	std	Y+51, r26	; 0x33
    1120:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1122:	69 a9       	ldd	r22, Y+49	; 0x31
    1124:	7a a9       	ldd	r23, Y+50	; 0x32
    1126:	8b a9       	ldd	r24, Y+51	; 0x33
    1128:	9c a9       	ldd	r25, Y+52	; 0x34
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e8       	ldi	r20, 0x80	; 128
    1130:	5f e3       	ldi	r21, 0x3F	; 63
    1132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1136:	88 23       	and	r24, r24
    1138:	2c f4       	brge	.+10     	; 0x1144 <LCD_displayCharacter+0x84>
		__ticks = 1;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	98 ab       	std	Y+48, r25	; 0x30
    1140:	8f a7       	std	Y+47, r24	; 0x2f
    1142:	3f c0       	rjmp	.+126    	; 0x11c2 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1144:	69 a9       	ldd	r22, Y+49	; 0x31
    1146:	7a a9       	ldd	r23, Y+50	; 0x32
    1148:	8b a9       	ldd	r24, Y+51	; 0x33
    114a:	9c a9       	ldd	r25, Y+52	; 0x34
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	3f ef       	ldi	r19, 0xFF	; 255
    1150:	4f e7       	ldi	r20, 0x7F	; 127
    1152:	57 e4       	ldi	r21, 0x47	; 71
    1154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1158:	18 16       	cp	r1, r24
    115a:	4c f5       	brge	.+82     	; 0x11ae <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	6d a9       	ldd	r22, Y+53	; 0x35
    115e:	7e a9       	ldd	r23, Y+54	; 0x36
    1160:	8f a9       	ldd	r24, Y+55	; 0x37
    1162:	98 ad       	ldd	r25, Y+56	; 0x38
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	bc 01       	movw	r22, r24
    1176:	cd 01       	movw	r24, r26
    1178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	98 ab       	std	Y+48, r25	; 0x30
    1182:	8f a7       	std	Y+47, r24	; 0x2f
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <LCD_displayCharacter+0xe4>
    1186:	89 e1       	ldi	r24, 0x19	; 25
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9e a7       	std	Y+46, r25	; 0x2e
    118c:	8d a7       	std	Y+45, r24	; 0x2d
    118e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1190:	9e a5       	ldd	r25, Y+46	; 0x2e
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LCD_displayCharacter+0xd2>
    1196:	9e a7       	std	Y+46, r25	; 0x2e
    1198:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119a:	8f a5       	ldd	r24, Y+47	; 0x2f
    119c:	98 a9       	ldd	r25, Y+48	; 0x30
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	98 ab       	std	Y+48, r25	; 0x30
    11a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a6:	98 a9       	ldd	r25, Y+48	; 0x30
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	69 f7       	brne	.-38     	; 0x1186 <LCD_displayCharacter+0xc6>
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ae:	69 a9       	ldd	r22, Y+49	; 0x31
    11b0:	7a a9       	ldd	r23, Y+50	; 0x32
    11b2:	8b a9       	ldd	r24, Y+51	; 0x33
    11b4:	9c a9       	ldd	r25, Y+52	; 0x34
    11b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	98 ab       	std	Y+48, r25	; 0x30
    11c0:	8f a7       	std	Y+47, r24	; 0x2f
    11c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c4:	98 a9       	ldd	r25, Y+48	; 0x30
    11c6:	9c a7       	std	Y+44, r25	; 0x2c
    11c8:	8b a7       	std	Y+43, r24	; 0x2b
    11ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    11cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <LCD_displayCharacter+0x10e>
    11d2:	9c a7       	std	Y+44, r25	; 0x2c
    11d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    11d6:	a2 e3       	ldi	r26, 0x32	; 50
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e2 e3       	ldi	r30, 0x32	; 50
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	8c 93       	st	X, r24
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 e8       	ldi	r26, 0x80	; 128
    11ea:	bf e3       	ldi	r27, 0x3F	; 63
    11ec:	8f a3       	std	Y+39, r24	; 0x27
    11ee:	98 a7       	std	Y+40, r25	; 0x28
    11f0:	a9 a7       	std	Y+41, r26	; 0x29
    11f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6f a1       	ldd	r22, Y+39	; 0x27
    11f6:	78 a5       	ldd	r23, Y+40	; 0x28
    11f8:	89 a5       	ldd	r24, Y+41	; 0x29
    11fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a e7       	ldi	r20, 0x7A	; 122
    1202:	53 e4       	ldi	r21, 0x43	; 67
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8b a3       	std	Y+35, r24	; 0x23
    120e:	9c a3       	std	Y+36, r25	; 0x24
    1210:	ad a3       	std	Y+37, r26	; 0x25
    1212:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <LCD_displayCharacter+0x176>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9a a3       	std	Y+34, r25	; 0x22
    1232:	89 a3       	std	Y+33, r24	; 0x21
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1236:	6b a1       	ldd	r22, Y+35	; 0x23
    1238:	7c a1       	ldd	r23, Y+36	; 0x24
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
    123c:	9e a1       	ldd	r25, Y+38	; 0x26
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6f a1       	ldd	r22, Y+39	; 0x27
    1250:	78 a5       	ldd	r23, Y+40	; 0x28
    1252:	89 a5       	ldd	r24, Y+41	; 0x29
    1254:	9a a5       	ldd	r25, Y+42	; 0x2a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	89 a3       	std	Y+33, r24	; 0x21
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <LCD_displayCharacter+0x1d6>
    1278:	89 e1       	ldi	r24, 0x19	; 25
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1282:	98 a1       	ldd	r25, Y+32	; 0x20
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <LCD_displayCharacter+0x1c4>
    1288:	98 a3       	std	Y+32, r25	; 0x20
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	89 a1       	ldd	r24, Y+33	; 0x21
    128e:	9a a1       	ldd	r25, Y+34	; 0x22
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	9a a1       	ldd	r25, Y+34	; 0x22
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <LCD_displayCharacter+0x1b8>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	6b a1       	ldd	r22, Y+35	; 0x23
    12a2:	7c a1       	ldd	r23, Y+36	; 0x24
    12a4:	8d a1       	ldd	r24, Y+37	; 0x25
    12a6:	9e a1       	ldd	r25, Y+38	; 0x26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	89 a3       	std	Y+33, r24	; 0x21
    12b4:	89 a1       	ldd	r24, Y+33	; 0x21
    12b6:	9a a1       	ldd	r25, Y+34	; 0x22
    12b8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
    12bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <LCD_displayCharacter+0x200>
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    12c8:	e5 e3       	ldi	r30, 0x35	; 53
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	89 ad       	ldd	r24, Y+57	; 0x39
    12ce:	80 83       	st	Z, r24
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e8       	ldi	r26, 0x80	; 128
    12d6:	bf e3       	ldi	r27, 0x3F	; 63
    12d8:	89 8f       	std	Y+25, r24	; 0x19
    12da:	9a 8f       	std	Y+26, r25	; 0x1a
    12dc:	ab 8f       	std	Y+27, r26	; 0x1b
    12de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	69 8d       	ldd	r22, Y+25	; 0x19
    12e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	53 e4       	ldi	r21, 0x43	; 67
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	8d 8b       	std	Y+21, r24	; 0x15
    12fa:	9e 8b       	std	Y+22, r25	; 0x16
    12fc:	af 8b       	std	Y+23, r26	; 0x17
    12fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1300:	6d 89       	ldd	r22, Y+21	; 0x15
    1302:	7e 89       	ldd	r23, Y+22	; 0x16
    1304:	8f 89       	ldd	r24, Y+23	; 0x17
    1306:	98 8d       	ldd	r25, Y+24	; 0x18
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9c 8b       	std	Y+20, r25	; 0x14
    131e:	8b 8b       	std	Y+19, r24	; 0x13
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1322:	6d 89       	ldd	r22, Y+21	; 0x15
    1324:	7e 89       	ldd	r23, Y+22	; 0x16
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	69 8d       	ldd	r22, Y+25	; 0x19
    133c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1340:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9c 8b       	std	Y+20, r25	; 0x14
    1360:	8b 8b       	std	Y+19, r24	; 0x13
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <LCD_displayCharacter+0x2c2>
    1364:	89 e1       	ldi	r24, 0x19	; 25
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9a 8b       	std	Y+18, r25	; 0x12
    136a:	89 8b       	std	Y+17, r24	; 0x11
    136c:	89 89       	ldd	r24, Y+17	; 0x11
    136e:	9a 89       	ldd	r25, Y+18	; 0x12
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_displayCharacter+0x2b0>
    1374:	9a 8b       	std	Y+18, r25	; 0x12
    1376:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8b 89       	ldd	r24, Y+19	; 0x13
    137a:	9c 89       	ldd	r25, Y+20	; 0x14
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	9c 8b       	std	Y+20, r25	; 0x14
    1380:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8b 89       	ldd	r24, Y+19	; 0x13
    1384:	9c 89       	ldd	r25, Y+20	; 0x14
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <LCD_displayCharacter+0x2a4>
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	6d 89       	ldd	r22, Y+21	; 0x15
    138e:	7e 89       	ldd	r23, Y+22	; 0x16
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9c 8b       	std	Y+20, r25	; 0x14
    139e:	8b 8b       	std	Y+19, r24	; 0x13
    13a0:	8b 89       	ldd	r24, Y+19	; 0x13
    13a2:	9c 89       	ldd	r25, Y+20	; 0x14
    13a4:	98 8b       	std	Y+16, r25	; 0x10
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
    13a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13aa:	98 89       	ldd	r25, Y+16	; 0x10
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_displayCharacter+0x2ec>
    13b0:	98 8b       	std	Y+16, r25	; 0x10
    13b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    13b4:	a2 e3       	ldi	r26, 0x32	; 50
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e2 e3       	ldi	r30, 0x32	; 50
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7b       	andi	r24, 0xBF	; 191
    13c0:	8c 93       	st	X, r24
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e8       	ldi	r26, 0x80	; 128
    13c8:	bf e3       	ldi	r27, 0x3F	; 63
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	53 e4       	ldi	r21, 0x43	; 67
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <LCD_displayCharacter+0x354>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <LCD_displayCharacter+0x3b4>
    1456:	89 e1       	ldi	r24, 0x19	; 25
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <LCD_displayCharacter+0x3a2>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <LCD_displayCharacter+0x396>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <LCD_displayCharacter+0x3de>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    14a6:	e9 96       	adiw	r28, 0x39	; 57
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <LCD_displayString+0x6>
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	9b 83       	std	Y+3, r25	; 0x03
    14c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	0e c0       	rjmp	.+28     	; 0x14e8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	9b 81       	ldd	r25, Y+3	; 0x03
    14d6:	fc 01       	movw	r30, r24
    14d8:	e2 0f       	add	r30, r18
    14da:	f3 1f       	adc	r31, r19
    14dc:	80 81       	ld	r24, Z
    14de:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_displayCharacter>
		i++;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	fc 01       	movw	r30, r24
    14f4:	e2 0f       	add	r30, r18
    14f6:	f3 1f       	adc	r31, r19
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	39 f7       	brne	.-50     	; 0x14cc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <LCD_goToRowColumn+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <LCD_goToRowColumn+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3d 83       	std	Y+5, r19	; 0x05
    1524:	2c 83       	std	Y+4, r18	; 0x04
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	c1 f0       	breq	.+48     	; 0x1560 <LCD_goToRowColumn+0x56>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <LCD_goToRowColumn+0x3a>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <LCD_goToRowColumn+0x50>
    1542:	19 c0       	rjmp	.+50     	; 0x1576 <LCD_goToRowColumn+0x6c>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	69 f0       	breq	.+26     	; 0x1568 <LCD_goToRowColumn+0x5e>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	61 f0       	breq	.+24     	; 0x1570 <LCD_goToRowColumn+0x66>
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	0b c0       	rjmp	.+22     	; 0x1576 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	80 5c       	subi	r24, 0xC0	; 192
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	07 c0       	rjmp	.+14     	; 0x1576 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	80 5f       	subi	r24, 0xF0	; 240
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	80 5b       	subi	r24, 0xB0	; 176
    1574:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	80 68       	ori	r24, 0x80	; 128
    157a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LCD_sendCommand>
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <LCD_displayStringRowColumn+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <LCD_displayStringRowColumn+0x8>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6a 83       	std	Y+2, r22	; 0x02
    159e:	5c 83       	std	Y+4, r21	; 0x04
    15a0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	6a 81       	ldd	r22, Y+2	; 0x02
    15a6:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_displayString>
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	62 97       	sbiw	r28, 0x12	; 18
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	9a 8b       	std	Y+18, r25	; 0x12
    15d6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    15d8:	89 89       	ldd	r24, Y+17	; 0x11
    15da:	9a 89       	ldd	r25, Y+18	; 0x12
    15dc:	9e 01       	movw	r18, r28
    15de:	2f 5f       	subi	r18, 0xFF	; 255
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	b9 01       	movw	r22, r18
    15e4:	4a e0       	ldi	r20, 0x0A	; 10
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	0e 94 20 0c 	call	0x1840	; 0x1840 <itoa>
   LCD_displayString(buff);
    15ec:	ce 01       	movw	r24, r28
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_displayString>
}
    15f4:	62 96       	adiw	r28, 0x12	; 18
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LCD_sendCommand>
}
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Anticlock_Direction>:
#include "lcd.h"
#include "timer.h"

uint8 Direction_Flag = 0;
void Anticlock_Direction(void)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	if(Direction_Flag == 0)
    1622:	80 91 80 00 	lds	r24, 0x0080
    1626:	88 23       	and	r24, r24
    1628:	91 f4       	brne	.+36     	; 0x164e <Anticlock_Direction+0x34>
	{
		SET_BIT(PORTB,PB0);
    162a:	a8 e3       	ldi	r26, 0x38	; 56
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	81 60       	ori	r24, 0x01	; 1
    1636:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,PB1);
    1638:	a8 e3       	ldi	r26, 0x38	; 56
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e8 e3       	ldi	r30, 0x38	; 56
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	8d 7f       	andi	r24, 0xFD	; 253
    1644:	8c 93       	st	X, r24
		Direction_Flag = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	80 93 80 00 	sts	0x0080, r24
    164c:	14 c0       	rjmp	.+40     	; 0x1676 <Anticlock_Direction+0x5c>
	}
	else if(Direction_Flag == 1)
    164e:	80 91 80 00 	lds	r24, 0x0080
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	81 f4       	brne	.+32     	; 0x1676 <Anticlock_Direction+0x5c>
	{
		SET_BIT(PORTB,PB1);
    1656:	a8 e3       	ldi	r26, 0x38	; 56
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e3       	ldi	r30, 0x38	; 56
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	82 60       	ori	r24, 0x02	; 2
    1662:	8c 93       	st	X, r24
		CLEAR_BIT(PORTB,PB0);
    1664:	a8 e3       	ldi	r26, 0x38	; 56
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8e 7f       	andi	r24, 0xFE	; 254
    1670:	8c 93       	st	X, r24
		Direction_Flag = 0;
    1672:	10 92 80 00 	sts	0x0080, r1
	}
}
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <main>:

int main(void)
{
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	00 d0       	rcall	.+0      	; 0x1682 <main+0x6>
    1682:	00 d0       	rcall	.+0      	; 0x1684 <main+0x8>
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
	uint16 g_adcResult;
	uint16 g_ORC0;
	 /* output */
	SET_BIT(DDRB,PB0);
    1688:	a7 e3       	ldi	r26, 0x37	; 55
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e7 e3       	ldi	r30, 0x37	; 55
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	81 60       	ori	r24, 0x01	; 1
    1694:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB1);
    1696:	a7 e3       	ldi	r26, 0x37	; 55
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e7 e3       	ldi	r30, 0x37	; 55
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	82 60       	ori	r24, 0x02	; 2
    16a2:	8c 93       	st	X, r24
	/* turn on motor in clockwise */
	SET_BIT(PORTB,PB1);
    16a4:	a8 e3       	ldi	r26, 0x38	; 56
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	82 60       	ori	r24, 0x02	; 2
    16b0:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,PB0);
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8e 7f       	andi	r24, 0xFE	; 254
    16be:	8c 93       	st	X, r24
	/* intialize ADC and interrupt and LCD*/
    ADC_init();
    16c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_init>
	LCD_init();
    16c4:	0e 94 49 06 	call	0xc92	; 0xc92 <LCD_init>
	INTERRUPT_init();
    16c8:	0e 94 14 06 	call	0xc28	; 0xc28 <INTERRUPT_init>
	/* Call back interrupt */
	INTERRUPT_1_callBack(Anticlock_Direction);
    16cc:	8d e0       	ldi	r24, 0x0D	; 13
    16ce:	9b e0       	ldi	r25, 0x0B	; 11
    16d0:	0e 94 37 06 	call	0xc6e	; 0xc6e <INTERRUPT_1_callBack>
	/* Enable The i-bit*/
	SREG |= (1<<7);
    16d4:	af e5       	ldi	r26, 0x5F	; 95
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	ef e5       	ldi	r30, 0x5F	; 95
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	8c 93       	st	X, r24

	LCD_clearScreen();
    16e2:	0e 94 03 0b 	call	0x1606	; 0x1606 <LCD_clearScreen>
	LCD_displayString("ADC Value = ");
    16e6:	80 e6       	ldi	r24, 0x60	; 96
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_displayString>

	while(1)
	{
		g_adcResult = ADC_readChannel(0);
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0e 94 b1 05 	call	0xb62	; 0xb62 <ADC_readChannel>
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	8b 83       	std	Y+3, r24	; 0x03
		/* value of OCR0 = adcValue / 4 */
		g_ORC0= ((ADC_readChannel(0))/4);
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	0e 94 b1 05 	call	0xb62	; 0xb62 <ADC_readChannel>
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	96 95       	lsr	r25
    1704:	87 95       	ror	r24
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
		/* Enable the timer at value of ORC0 */
		Timer0_Init(g_ORC0);
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	0e 94 cd 0b 	call	0x179a	; 0x179a <Timer0_Init>
		/* display adcVaule */
		LCD_goToRowColumn(0,12);
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	6c e0       	ldi	r22, 0x0C	; 12
    1714:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_goToRowColumn>

		if(g_adcResult > 1000)
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	23 e0       	ldi	r18, 0x03	; 3
    171e:	89 3e       	cpi	r24, 0xE9	; 233
    1720:	92 07       	cpc	r25, r18
    1722:	28 f0       	brcs	.+10     	; 0x172e <main+0xb2>
		{
			LCD_intgerToString(g_adcResult);
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_intgerToString>
    172c:	e0 cf       	rjmp	.-64     	; 0x16ee <main+0x72>
		}
		else if(g_adcResult >= 100 && g_adcResult < 1000)
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	84 36       	cpi	r24, 0x64	; 100
    1734:	91 05       	cpc	r25, r1
    1736:	78 f0       	brcs	.+30     	; 0x1756 <main+0xda>
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	23 e0       	ldi	r18, 0x03	; 3
    173e:	88 3e       	cpi	r24, 0xE8	; 232
    1740:	92 07       	cpc	r25, r18
    1742:	48 f4       	brcc	.+18     	; 0x1756 <main+0xda>
		{
			LCD_displayString(" ");
    1744:	8d e6       	ldi	r24, 0x6D	; 109
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_displayString>
			LCD_intgerToString(g_adcResult);
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_intgerToString>
    1754:	cc cf       	rjmp	.-104    	; 0x16ee <main+0x72>
		}
		else if(g_adcResult >= 10 && g_adcResult < 100)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	8a 30       	cpi	r24, 0x0A	; 10
    175c:	91 05       	cpc	r25, r1
    175e:	70 f0       	brcs	.+28     	; 0x177c <main+0x100>
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	84 36       	cpi	r24, 0x64	; 100
    1766:	91 05       	cpc	r25, r1
    1768:	48 f4       	brcc	.+18     	; 0x177c <main+0x100>
		{
			LCD_displayString("  ");
    176a:	8f e6       	ldi	r24, 0x6F	; 111
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_displayString>
			LCD_intgerToString(g_adcResult);
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_intgerToString>
    177a:	b9 cf       	rjmp	.-142    	; 0x16ee <main+0x72>
		}
		else if(g_adcResult < 10)
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	8a 30       	cpi	r24, 0x0A	; 10
    1782:	91 05       	cpc	r25, r1
    1784:	08 f0       	brcs	.+2      	; 0x1788 <main+0x10c>
    1786:	b3 cf       	rjmp	.-154    	; 0x16ee <main+0x72>
		{
			LCD_displayString("   ");
    1788:	82 e7       	ldi	r24, 0x72	; 114
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <LCD_displayString>
			LCD_intgerToString(g_adcResult);
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_intgerToString>
    1798:	aa cf       	rjmp	.-172    	; 0x16ee <main+0x72>

0000179a <Timer0_Init>:
	 * PWM in Timer0
	 * clear on compare
	 * F_CPU / 8
	 */
void Timer0_Init(uint8 duty_cycle)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	0f 92       	push	r0
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    17a6:	e2 e5       	ldi	r30, 0x52	; 82
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	10 82       	st	Z, r1

DDRB |= (1<<PB3);
    17ac:	a7 e3       	ldi	r26, 0x37	; 55
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e7 e3       	ldi	r30, 0x37	; 55
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 60       	ori	r24, 0x08	; 8
    17b8:	8c 93       	st	X, r24

OCR0  = duty_cycle;
    17ba:	ec e5       	ldi	r30, 0x5C	; 92
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	80 83       	st	Z, r24

TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) | (1<<CS00);
    17c2:	e3 e5       	ldi	r30, 0x53	; 83
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8b e6       	ldi	r24, 0x6B	; 107
    17c8:	80 83       	st	Z, r24
}
    17ca:	0f 90       	pop	r0
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <__prologue_saves__>:
    17d2:	2f 92       	push	r2
    17d4:	3f 92       	push	r3
    17d6:	4f 92       	push	r4
    17d8:	5f 92       	push	r5
    17da:	6f 92       	push	r6
    17dc:	7f 92       	push	r7
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	ca 1b       	sub	r28, r26
    17fc:	db 0b       	sbc	r29, r27
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	09 94       	ijmp

0000180a <__epilogue_restores__>:
    180a:	2a 88       	ldd	r2, Y+18	; 0x12
    180c:	39 88       	ldd	r3, Y+17	; 0x11
    180e:	48 88       	ldd	r4, Y+16	; 0x10
    1810:	5f 84       	ldd	r5, Y+15	; 0x0f
    1812:	6e 84       	ldd	r6, Y+14	; 0x0e
    1814:	7d 84       	ldd	r7, Y+13	; 0x0d
    1816:	8c 84       	ldd	r8, Y+12	; 0x0c
    1818:	9b 84       	ldd	r9, Y+11	; 0x0b
    181a:	aa 84       	ldd	r10, Y+10	; 0x0a
    181c:	b9 84       	ldd	r11, Y+9	; 0x09
    181e:	c8 84       	ldd	r12, Y+8	; 0x08
    1820:	df 80       	ldd	r13, Y+7	; 0x07
    1822:	ee 80       	ldd	r14, Y+6	; 0x06
    1824:	fd 80       	ldd	r15, Y+5	; 0x05
    1826:	0c 81       	ldd	r16, Y+4	; 0x04
    1828:	1b 81       	ldd	r17, Y+3	; 0x03
    182a:	aa 81       	ldd	r26, Y+2	; 0x02
    182c:	b9 81       	ldd	r27, Y+1	; 0x01
    182e:	ce 0f       	add	r28, r30
    1830:	d1 1d       	adc	r29, r1
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	ed 01       	movw	r28, r26
    183e:	08 95       	ret

00001840 <itoa>:
    1840:	fb 01       	movw	r30, r22
    1842:	9f 01       	movw	r18, r30
    1844:	e8 94       	clt
    1846:	42 30       	cpi	r20, 0x02	; 2
    1848:	c4 f0       	brlt	.+48     	; 0x187a <itoa+0x3a>
    184a:	45 32       	cpi	r20, 0x25	; 37
    184c:	b4 f4       	brge	.+44     	; 0x187a <itoa+0x3a>
    184e:	4a 30       	cpi	r20, 0x0A	; 10
    1850:	29 f4       	brne	.+10     	; 0x185c <itoa+0x1c>
    1852:	97 fb       	bst	r25, 7
    1854:	1e f4       	brtc	.+6      	; 0x185c <itoa+0x1c>
    1856:	90 95       	com	r25
    1858:	81 95       	neg	r24
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	64 2f       	mov	r22, r20
    185e:	77 27       	eor	r23, r23
    1860:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__udivmodhi4>
    1864:	80 5d       	subi	r24, 0xD0	; 208
    1866:	8a 33       	cpi	r24, 0x3A	; 58
    1868:	0c f0       	brlt	.+2      	; 0x186c <itoa+0x2c>
    186a:	89 5d       	subi	r24, 0xD9	; 217
    186c:	81 93       	st	Z+, r24
    186e:	cb 01       	movw	r24, r22
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	a1 f7       	brne	.-24     	; 0x185c <itoa+0x1c>
    1874:	16 f4       	brtc	.+4      	; 0x187a <itoa+0x3a>
    1876:	5d e2       	ldi	r21, 0x2D	; 45
    1878:	51 93       	st	Z+, r21
    187a:	10 82       	st	Z, r1
    187c:	c9 01       	movw	r24, r18
    187e:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <strrev>

00001882 <strrev>:
    1882:	dc 01       	movw	r26, r24
    1884:	fc 01       	movw	r30, r24
    1886:	67 2f       	mov	r22, r23
    1888:	71 91       	ld	r23, Z+
    188a:	77 23       	and	r23, r23
    188c:	e1 f7       	brne	.-8      	; 0x1886 <strrev+0x4>
    188e:	32 97       	sbiw	r30, 0x02	; 2
    1890:	04 c0       	rjmp	.+8      	; 0x189a <strrev+0x18>
    1892:	7c 91       	ld	r23, X
    1894:	6d 93       	st	X+, r22
    1896:	70 83       	st	Z, r23
    1898:	62 91       	ld	r22, -Z
    189a:	ae 17       	cp	r26, r30
    189c:	bf 07       	cpc	r27, r31
    189e:	c8 f3       	brcs	.-14     	; 0x1892 <strrev+0x10>
    18a0:	08 95       	ret

000018a2 <__udivmodhi4>:
    18a2:	aa 1b       	sub	r26, r26
    18a4:	bb 1b       	sub	r27, r27
    18a6:	51 e1       	ldi	r21, 0x11	; 17
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <__udivmodhi4_ep>

000018aa <__udivmodhi4_loop>:
    18aa:	aa 1f       	adc	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	a6 17       	cp	r26, r22
    18b0:	b7 07       	cpc	r27, r23
    18b2:	10 f0       	brcs	.+4      	; 0x18b8 <__udivmodhi4_ep>
    18b4:	a6 1b       	sub	r26, r22
    18b6:	b7 0b       	sbc	r27, r23

000018b8 <__udivmodhi4_ep>:
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	5a 95       	dec	r21
    18be:	a9 f7       	brne	.-22     	; 0x18aa <__udivmodhi4_loop>
    18c0:	80 95       	com	r24
    18c2:	90 95       	com	r25
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	08 95       	ret

000018ca <_exit>:
    18ca:	f8 94       	cli

000018cc <__stop_program>:
    18cc:	ff cf       	rjmp	.-2      	; 0x18cc <__stop_program>
